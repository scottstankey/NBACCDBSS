if(is.nan(adjdaydollar[j]) == TRUE){adjdaydollar[j] = 0}
if(j == dim(dailypos)[1]){dailypos[j+1,i] = 0}
if(adjdaydollar[j] > dollarliq)
{
tmpdaypos = adjdaypos[j]
adjdaypos[j] = dollarliq * adjdaypos[j] / adjdaydollar[j]
tmpdaydollar = adjdaydollar[j]
adjdaydollar[j] = dollarliq
dailypos[j+1,i] = dailypos[j+1,i] + as.numeric(dailypos[j,i]*(1- adjdaypos[j] / tmpdaypos))
}
# Find our total cumulative position on that day recursively
adjcumpos[j] = sum(adjcumpos[j-1],adjdaypos[j])
# Find how much we have spent cumulatively on that day recursively
adjcumdollar[j] = sum(adjcumdollar[j-1],adjdaydollar[j])
if(is.na(adjcumdollar[j]) == TRUE){adjcumdollar[j] = 0}
#  if(abs(adjcumpos[j]*tmp[j,"Price"]) > moneyinthebank)
#    {
#       adjcumpos[j] = moneyinthebank / tmp[j,"Price"]
#     adjcumdollar[j] = sum((adjcumpos[j] - adjcumpos[j-1])*tmp[j,"Price"],adjcumdollar[j-1])
#    }
# Find our cumulative pnl and store it
cumpnl[j] = sum(pnl[j],1000000 / length(names))
}
if(is.na(tmp[j,"Price"]) == TRUE)
{
pnl[j] = 0
# Find how much money we have
moneyinthebank = sum(pnl[j],1000000 / length(names))
# Find how many shares we have to buy
adjdaypos[j] = 0
# Find how much that costs
adjdaydollar[j] = 0
# Find our total cumulative position on that day recursively
adjcumpos[j] = sum(adjcumpos[j-1],adjdaypos[j])
# Find how much we have spent cumulatively on that day recursively
adjcumdollar[j] = sum(adjcumdollar[j-1],adjdaydollar[j])
# Find our cumulative pnl and store it
cumpnl[j] = sum(pnl[j],1000000 / length(names))
}
}
totalpnl = cbind(totalpnl,cumpnl)
plot(totalpnl)
plot(totalpnl[,1])
totalpnl
plot(totalpnl[,2])
plot(totalpnl[1:134,2])
j = 134
pnl[j]
moneyinthebank
adjdaypos[j]
adjdaydollar[j]
tmp[j,"Price"]
dollarliq
dolliq.smooth[j,i]
j
j = 135
pnl[j] = tmp[j,"Price"]*adjcumpos[j-1] - adjcumdollar[j-1]
pnl[j]
moneyinthebank
adjdaypos[j]
adjdaypos[j] = sum((dailypos[j,i] * moneyinthebank ) / (sigstrength * tmp[j,"Price"]),0)
adjdaypos[j]
dailypos[j,i]
j = 134
if(is.na(dollarliq) == TRUE){dollarliq = 0}
if(is.nan(adjdaypos[j]) == TRUE){adjdaypos[j] = 0}
if(is.nan(adjdaydollar[j]) == TRUE){adjdaydollar[j] = 0}
if(j == dim(dailypos)[1]){dailypos[j+1,i] = 0}
dailypos[j+1,i]
adjdaydollar[j]
adjdaypos[j]
tmpdaypos = adjdaypos[j]
adjdaypos[j] = dollarliq * adjdaypos[j] / adjdaydollar[j]
tmpdaydollar = adjdaydollar[j]
adjdaydollar[j] = dollarliq
dailypos[j+1,i] = dailypos[j+1,i] + as.numeric(dailypos[j,i]*(1- adjdaypos[j] / tmpdaypos))
tmpdaypos
adjdaypos[j]
tmpdaydollar
adjdaydollar[j]
dailypos[j,i]
adjdaypos[j] / tmpdaypos
finalpos[which(is.na(finalpos) == TRUE)] = 0
# Sum up cumpos
cumpos = NULL
for(i in 1:length(names))
{
cumpossym = NULL
cumpossym = cumsum(finalpos[,i])
cumpos = cbind(cumpos,cumpossym)
}
cumpos = xts(cumpos,time(open))
cumulativepos = NULL
dailypos = NULL
for(i in 1:ncol(cumpos))
{
dayposi = NULL
cumposi = cumpos[,i]
cumposi[which(cumposi > sigstrength)] = sigstrength
cumposi[which(cumposi < -sigstrength)] = -sigstrength
dayposi = cumposi - lag(cumposi)
cumulativepos = cbind(cumulativepos,cumposi)
dailypos = cbind(dailypos,dayposi)
}
#Create long / short only positions.. Want to find value in long / short
#Create this above
#Create a VIX lag adj factor to add to position.. Try vixmults..
#Opposite vixmults would be interesting too
#Get sheet from Marc
#Incorporate short interest rates
#Where to get this data? Margin interest rates? Will?
#Incorporate liquidity factor #Check, on both levels
#Incorpoate leverage factor - FUCK - REVIEW WHERE THIS GOES
#Have Marc look at this, tricky
dailypos[1,] = 0
colnames(dolliq) = NULL
dolliq = as.data.frame(dolliq)
dolliq[0,] = 0
totalpnl = NULL
for(i in 1:length(names))
{
# Get the tmp we want to calculate pnl for
print(i)
tmp = get(names[i])
# Establish NULLS
adjdaypos = adjcumpos = adjdaydollar = adjcumdollar = pnl = daypnl = cumpnl = NULL
for(j in 1:(nrow(tmp) -1))
{
# Take the pnl on day j
if(is.na(tmp[j,"Price"]) == FALSE)
{
pnl[j] = tmp[j,"Price"]*adjcumpos[j-1] - adjcumdollar[j-1]
# Find how much money we have
moneyinthebank = sum(pnl[j],compcap / length(names))
# Find how many shares we have to buy
adjdaypos[j] = sum((dailypos[j,i] * moneyinthebank ) / (sigstrength * tmp[j,"Price"]),0)
# Find how much that costs
adjdaydollar[j] = adjdaypos[j] * tmp[j,"Price"]
dollarliq = as.numeric(dolliq.smooth[j,i])
if(is.na(dollarliq) == TRUE){dollarliq = 0}
if(is.nan(adjdaypos[j]) == TRUE){adjdaypos[j] = 0}
if(is.nan(adjdaydollar[j]) == TRUE){adjdaydollar[j] = 0}
if(j == dim(dailypos)[1]){dailypos[j+1,i] = 0}
if(adjdaydollar[j] > dollarliq)
{
tmpdaypos = adjdaypos[j]
adjdaypos[j] = dollarliq * adjdaypos[j] / adjdaydollar[j]
tmpdaydollar = adjdaydollar[j]
adjdaydollar[j] = dollarliq
dailypos[j+1,i] = dailypos[j+1,i] + as.numeric(dailypos[j,i]*(1- adjdaypos[j] / tmpdaypos))
}
# Find our total cumulative position on that day recursively
adjcumpos[j] = sum(adjcumpos[j-1],adjdaypos[j])
# Find how much we have spent cumulatively on that day recursively
adjcumdollar[j] = sum(adjcumdollar[j-1],adjdaydollar[j])
if(is.na(adjcumdollar[j]) == TRUE){adjcumdollar[j] = 0}
#  if(abs(adjcumpos[j]*tmp[j,"Price"]) > moneyinthebank)
#    {
#       adjcumpos[j] = moneyinthebank / tmp[j,"Price"]
#     adjcumdollar[j] = sum((adjcumpos[j] - adjcumpos[j-1])*tmp[j,"Price"],adjcumdollar[j-1])
#    }
# Find our cumulative pnl and store it
cumpnl[j] = sum(pnl[j],1000000 / length(names))
}
if(is.na(tmp[j,"Price"]) == TRUE)
{
pnl[j] = 0
# Find how much money we have
moneyinthebank = sum(pnl[j],1000000 / length(names))
# Find how many shares we have to buy
adjdaypos[j] = 0
# Find how much that costs
adjdaydollar[j] = 0
# Find our total cumulative position on that day recursively
adjcumpos[j] = sum(adjcumpos[j-1],adjdaypos[j])
# Find how much we have spent cumulatively on that day recursively
adjcumdollar[j] = sum(adjcumdollar[j-1],adjdaydollar[j])
# Find our cumulative pnl and store it
cumpnl[j] = sum(pnl[j],1000000 / length(names))
}
}
totalpnl = cbind(totalpnl,cumpnl)
}
totalpnl = rbind(totalpnl,totalpnl[dim(totalpnl)[2],])
totalpnl = xts(totalpnl,na.rm = TRUE,time(open))
totpnl = xts(rowSums(totalpnl,na.rm = TRUE),time(open))
totpnl[1] = totpnl[2]
plot(totpnl)
percpnl = NULL
monthperc = NULL
for(i in 1:(nrow(totpnl)-1))
{
percpnl[i] = as.numeric(totpnl[i+1]) / as.numeric(totpnl[i]) - 1
}
percpnl = xts(percpnl,time(open[1:(nrow(open)-1)]))
sr = mean(percpnl) / sd(percpnl) * sqrt(252)
print(sr)
percent = as.numeric(last(totpnl)) / as.numeric(first(totpnl)) - 1
print(percent)
repnl = NULL
repnl[1] = totpnl[1]
for(i in 2:length(percpnl))
{
repnl[i] = repnl[i-1]*(1+percpnl[i])
}
repnl1 = xts(repnl,time(open[1:(nrow(open)-1)]))
getSymbols("SPY")
openSAP = SPY[,2]
openSAP = xts(openSAP,time(open))
percSAP = NULL
for(i in 1:(nrow(totpnl)-1))
{
percSAP[i] = as.numeric(openSAP[i+1]) / as.numeric(openSAP[i]) - 1
}
percSAP = xts(percSAP,time(open[1:(nrow(open)-1)]))
testSAP = percSAP[c((nrow(percSAP)-3*252):nrow(percSAP))]
testpnl = percpnl[c((nrow(percpnl)-3*252):nrow(percpnl))]
reSAP = NULL
reSAP[1] = totpnl[1]
for(i in 2:length(percpnl))
{
reSAP[i] = reSAP[i-1]*(1+percSAP[i])
}
reSAP1 = xts(reSAP,time(open[1:(nrow(open)-1)]))
comp = cbind(repnl1,reSAP1)
plot(repnl1,ylim = c(min(reSAP1),max(repnl1)))
par(new = TRUE)
plot(reSAP1,ylim = c(min(reSAP1),max(repnl1)),main = NULL,col = "red")
print(sr)
testpnl = totalpnl
for(i in 1:ncol(testpnl))
{
neg = which(testpnl[,i] < 0)[1]
if(is.na(neg) == FALSE)
{
testpnl[c(neg:nrow(testpnl)),i] = 0
}
}
testpnl = xts(rowSums(testpnl,na.rm=TRUE),time(open))
plot(testpnl)
perctest = (testpnl - lag(testpnl))/testpnl
mean(perctest,na.rm=TRUE) / sd(perctest,na.rm=TRUE) * sqrt(252)
plot(totpnl)
sr = mean(percpnl) / sd(percpnl) * sqrt(252)
print(sr)
tail(totalpnl)
plot(totalpnl[,7])
names[7]
plot(MAC.Open)
which(totalpnl[,7] < 0)
finalpos[which(is.na(finalpos) == TRUE)] = 0
# Sum up cumpos
cumpos = NULL
for(i in 1:length(names))
{
cumpossym = NULL
cumpossym = cumsum(finalpos[,i])
cumpos = cbind(cumpos,cumpossym)
}
cumpos = xts(cumpos,time(open))
cumulativepos = NULL
dailypos = NULL
for(i in 1:ncol(cumpos))
{
dayposi = NULL
cumposi = cumpos[,i]
cumposi[which(cumposi > sigstrength)] = sigstrength
cumposi[which(cumposi < -sigstrength)] = -sigstrength
dayposi = cumposi - lag(cumposi)
cumulativepos = cbind(cumulativepos,cumposi)
dailypos = cbind(dailypos,dayposi)
}
dailypos[1,] = 0
colnames(dolliq) = NULL
dolliq = as.data.frame(dolliq)
dolliq[0,] = 0
totalpnl = NULL
i = 7
tmp = get(names[i])
# Establish NULLS
adjdaypos = adjcumpos = adjdaydollar = adjcumdollar = pnl = daypnl = cumpnl = NULL
for(j in 1:653)
{
# Take the pnl on day j
if(is.na(tmp[j,"Price"]) == FALSE)
{
pnl[j] = tmp[j,"Price"]*adjcumpos[j-1] - adjcumdollar[j-1]
# Find how much money we have
moneyinthebank = sum(pnl[j],compcap / length(names))
# Find how many shares we have to buy
adjdaypos[j] = sum((dailypos[j,i] * moneyinthebank ) / (sigstrength * tmp[j,"Price"]),0)
# Find how much that costs
adjdaydollar[j] = adjdaypos[j] * tmp[j,"Price"]
dollarliq = as.numeric(dolliq.smooth[j,i])
if(is.na(dollarliq) == TRUE){dollarliq = 0}
if(is.nan(adjdaypos[j]) == TRUE){adjdaypos[j] = 0}
if(is.nan(adjdaydollar[j]) == TRUE){adjdaydollar[j] = 0}
if(j == dim(dailypos)[1]){dailypos[j+1,i] = 0}
if(adjdaydollar[j] > dollarliq)
{
tmpdaypos = adjdaypos[j]
adjdaypos[j] = dollarliq * adjdaypos[j] / adjdaydollar[j]
tmpdaydollar = adjdaydollar[j]
adjdaydollar[j] = dollarliq
dailypos[j+1,i] = dailypos[j+1,i] + as.numeric(dailypos[j,i]*(1- adjdaypos[j] / tmpdaypos))
}
# Find our total cumulative position on that day recursively
adjcumpos[j] = sum(adjcumpos[j-1],adjdaypos[j])
# Find how much we have spent cumulatively on that day recursively
adjcumdollar[j] = sum(adjcumdollar[j-1],adjdaydollar[j])
if(is.na(adjcumdollar[j]) == TRUE){adjcumdollar[j] = 0}
#  if(abs(adjcumpos[j]*tmp[j,"Price"]) > moneyinthebank)
#    {
#       adjcumpos[j] = moneyinthebank / tmp[j,"Price"]
#     adjcumdollar[j] = sum((adjcumpos[j] - adjcumpos[j-1])*tmp[j,"Price"],adjcumdollar[j-1])
#    }
# Find our cumulative pnl and store it
cumpnl[j] = sum(pnl[j],1000000 / length(names))
}
if(is.na(tmp[j,"Price"]) == TRUE)
{
pnl[j] = 0
# Find how much money we have
moneyinthebank = sum(pnl[j],1000000 / length(names))
# Find how many shares we have to buy
adjdaypos[j] = 0
# Find how much that costs
adjdaydollar[j] = 0
# Find our total cumulative position on that day recursively
adjcumpos[j] = sum(adjcumpos[j-1],adjdaypos[j])
# Find how much we have spent cumulatively on that day recursively
adjcumdollar[j] = sum(adjcumdollar[j-1],adjdaydollar[j])
# Find our cumulative pnl and store it
cumpnl[j] = sum(pnl[j],1000000 / length(names))
}
}
plot(totalpnl)
plot(cumpnl)
j = 654
pnl[j] = tmp[j,"Price"]*adjcumpos[j-1] - adjcumdollar[j-1]
pnl[j]
moneyinthebank = sum(pnl[j],compcap / length(names))
moneyinthebank
adjdaypos[j] = sum((dailypos[j,i] * moneyinthebank ) / (sigstrength * tmp[j,"Price"]),0)
adjdaypos[j]
adjdaydollar[j] = adjdaypos[j] * tmp[j,"Price"]
dollarliq = as.numeric(dolliq.smooth[j,i])
if(is.na(dollarliq) == TRUE){dollarliq = 0}
if(is.nan(adjdaypos[j]) == TRUE){adjdaypos[j] = 0}
if(is.nan(adjdaydollar[j]) == TRUE){adjdaydollar[j] = 0}
if(j == dim(dailypos)[1]){dailypos[j+1,i] = 0}
if(adjdaydollar[j] > dollarliq)
{
tmpdaypos = adjdaypos[j]
adjdaypos[j] = dollarliq * adjdaypos[j] / adjdaydollar[j]
tmpdaydollar = adjdaydollar[j]
adjdaydollar[j] = dollarliq
dailypos[j+1,i] = dailypos[j+1,i] + as.numeric(dailypos[j,i]*(1- adjdaypos[j] / tmpdaypos))
}
# Find our total cumulative position on that day recursively
adjcumpos[j] = sum(adjcumpos[j-1],adjdaypos[j])
# Find how much we have spent cumulatively on that day recursively
adjcumdollar[j] = sum(adjcumdollar[j-1],adjdaydollar[j])
if(is.na(adjcumdollar[j]) == TRUE){adjcumdollar[j] = 0}
#  if(abs(adjcumpos[j]*tmp[j,"Price"]) > moneyinthebank)
#    {
#       adjcumpos[j] = moneyinthebank / tmp[j,"Price"]
#     adjcumdollar[j] = sum((adjcumpos[j] - adjcumpos[j-1])*tmp[j,"Price"],adjcumdollar[j-1])
#    }
# Find our cumulative pnl and store it
cumpnl[j] = sum(pnl[j],1000000 / length(names))
j = 655
pnl[j] = tmp[j,"Price"]*adjcumpos[j-1] - adjcumdollar[j-1]
pnl[j]
moneyinthebank
moneyinthebank = sum(pnl[j],compcap / length(names))
moneyinthebank
j=654
adjcumdollar[j]
finalpos[which(is.na(finalpos) == TRUE)] = 0
# Sum up cumpos
cumpos = NULL
for(i in 1:length(names))
{
cumpossym = NULL
cumpossym = cumsum(finalpos[,i])
cumpos = cbind(cumpos,cumpossym)
}
cumpos = xts(cumpos,time(open))
cumulativepos = NULL
dailypos = NULL
for(i in 1:ncol(cumpos))
{
dayposi = NULL
cumposi = cumpos[,i]
cumposi[which(cumposi > sigstrength)] = sigstrength
cumposi[which(cumposi < -sigstrength)] = -sigstrength
dayposi = cumposi - lag(cumposi)
cumulativepos = cbind(cumulativepos,cumposi)
dailypos = cbind(dailypos,dayposi)
}
#Create long / short only positions.. Want to find value in long / short
#Create this above
#Create a VIX lag adj factor to add to position.. Try vixmults..
#Opposite vixmults would be interesting too
#Get sheet from Marc
#Incorporate short interest rates
#Where to get this data? Margin interest rates? Will?
#Incorporate liquidity factor #Check, on both levels
#Incorpoate leverage factor - FUCK - REVIEW WHERE THIS GOES
#Have Marc look at this, tricky
dailypos[1,] = 0
colnames(dolliq) = NULL
dolliq = as.data.frame(dolliq)
dolliq[0,] = 0
totalpnl = NULL
plot(pnl)
length(pnl)
plot(cumpnl)
(newplot = FALSE)
newplot
plot(adjcumdollar)
plot(cumpnl)
par(new=TRUE)
plot(adjcumdollar)
plot(cumpnl)
par(new=TRUE)
plot(adjcumdollar, ylim=(range(cumpnl)[1],range(cumpnl)[2]))
range(cumpnl[1])
range(cumpnl)[1]
range(cumpnl)[2]
plot(adjcumdollar, ylim=c(range(cumpnl)[1],range(cumpnl)[2]))
plot(xts(cumpnl,time(open[1:655,1])))
dim(cumpnl)
length(cumpnl)
plot(xts(cumpnl,time(open[1:654,1])))
par(new = TRUE)
plot(xts(adjcumdollar,time(open[1:654,1])),ylim=c(range(cumpnl)[1],range(cumpnl)[2]))
plot(xts(cumpnl,time(open[1:654,1])))
par(new = TRUE)
plot(xts(adjcumdollar,time(open[1:654,1])),ylim=c(range(cumpnl)[1],range(cumpnl)[2]), col = "red")
plot(xts(cumpnl,time(open[1:654,1])))
par(new = TRUE)
plot(xts(abs(adjcumdollar),time(open[1:654,1])),ylim=c(range(cumpnl)[1],range(cumpnl)[2]), col = "red")
open530 <- read.csv("~/Documents/open530.csv")
View(open530)
dim(open530)
plot(totalpnl)
plot(totpnl)
plot(cumpos)
plot(cumulativepos)
plot(SLXP.Open)
MERGED2013_PP <- read.csv("~/Downloads/CollegeScorecard_Raw_Data/MERGED2013_PP.csv", stringsAsFactors=FALSE)
View(MERGED2013_PP)
tmp = MERGED2013_PP
dim(tmp)
tail(tmp)
which(colnames(tmp) == "veteran")
strng = tmp[,1613]
table(strng)
plot(strng)
strng
colnames(tmp)
grep("vet", tmp)
tmp[4]
install.packages("finra")
install.packages("edgar")
install.packages("forecast")
??arima
install.packages("rvest")
library("rvest", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
html("http://google.com")
html("http://stats.nba.com/scores/#!/1/10/2016")
tmp = html("http://stats.nba.com/scores/#!/1/10/2016")
tmp
tmp = read_html("http://stats.nba.com/scores/#!/1/10/2016")
tmp
tmp[1]
tmp[2]
print(tmp)
tmp
hmtl_attrs(tmp)
hmtl_attr(tmp)
hmtl_attr("http://stats.nba.com/scores/#!/1/10/2016")
?html_text
html_text("http://stats.nba.com/scores/#!/1/10/2016")
html_attrs("http://stats.nba.com/scores/#!/1/10/2016")
html_attrs(tmp)
html_text(tmp)
html_form(tmp)
html_name(tmp)
tmp = read_html("http://stats.nba.com/game/#!/0021500558/")
tmp
html_attr(tmp)
html_attrs(tmp)
html_children(tmp)
html_form(tmp)
html_name(tmp)
html_node(tmp)
html_table(tmp)
html_table(tmp, fill = T)
tmp1 =  html_table(tmp, fill = T)
tmp1
html_text(tmp)
library(XML)
readHTMLTable("http://stats.nba.com/scores/#!/1/10/2016")
readHTMLTable("http://stats.nba.com/game/#!/0021500495/advanced/")
tailtmp = readHTMLTable("http://stats.nba.com/game/#!/0021500495/advanced/")
tailtmp
tail(tailtmp)
tailtmp[,1]
tailtmp[1,]
